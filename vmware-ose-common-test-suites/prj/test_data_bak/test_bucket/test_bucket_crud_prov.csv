TCID,CaseTitle,Catalog,Priority,Variables,PreCondition,Role,ClientType,AuthSettings,Action,Parameter,ExpectResponseCode,ExpectResponseHeader,ExpectResponseBody,ExpectResponseBodySchema,PostValidation,Cleanup,Description,Comment
TestBucket#test01_test_bucket_crud#2,TU1 create a new bucket via vcloud token,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz""), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""3333""]}",
TestBucket#test01_test_bucket_crud#3,TU1 create a duplicated bucket created by vcd0:org1:tu1 via vcloud token,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.dup.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3],
""object_name_1"":""vcd0.org1.tu1.s3.ext.default1.txt"",
""object_name_2"":""vcd0.org1.tu1.s3.ext.default2.txt"",
""etag"":'""%s""' % calculate_md5(""test1""), ""usebytes"":5,
""contentType"":""image/png"", 
""org_user"":""vcd0:org1:tu1""}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200]),
(""group1:user1"", ""S3CompatibleAPI"", ""put_object"", {""Bucket"":self.variables[""bucket_name""], ""Key"":self.variables[""object_name_1""],""Body"":""test1"", ""ContentType"":self.variables[""contentType""]}, [200]),
(""group1:user1"", ""S3CompatibleAPI"", ""put_bucket_tagging"", {""Bucket"":self.variables[""bucket_name""], ""Tagging"":{""TagSet"": [{""Key"": ""test_key.1"",""Value"": ""test_value.1""}]}}, [204]),
(""group1:user1"", ""S3CompatibleAPI"", ""put_bucket_acl"", {""Bucket"":self.variables[""bucket_name""], ""ACL"":""group-read""}, [200])]
",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,,"Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200)"", """"]
group1:user1  |   S3CompatibleAPI  |   put_object  |  ["" {Bucket:self.variablesbucket_name"", "" Key:self.variablesobject_name_1"", ""Body:test1"", "" ContentType:self.variablescontentType}"", "" 200)"", """"]
group1:user1  |   S3CompatibleAPI  |   put_bucket_tagging  |  ["" {Bucket:self.variablesbucket_name"", "" Tagging:json.dumps({tagSets: {tags: { key: type"", ""value: bucket}}})}"", "" 204)"", """"]
group1:user1  |   S3CompatibleAPI  |   put_bucket_acl  |  ["" {Bucket:self.variablesbucket_name"", "" ACL:group-read}"", "" 200)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""], ""Accept"":""application/json;charset=UTF-8""}",
TestBucket#test01_test_bucket_crud#4,TU1 create a new bucket via vcloud token with name of a deleted bucket of his/her own,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.deleted.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3], ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#5,TU1 create a new bucket via vcloud token with name of a deleted bucket of other user in same tenant,create_bucket,P3,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.other.del.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3], ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404, 403, 409]), 
(""group1:user2"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user2"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user2"", ""S3CompatibleAPI"", ""delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404"", "" 403"", "" 409)"", "" ""]
group1:user2  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]
group1:user2  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#6,TU1 create a new bucket via vcloud token with name of a deleted bucket of other user in diff tenant,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.other.del.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3], ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404, 403, 409]), 
(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user1"", ""S3CompatibleAPI"", ""delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404"", "" 403"", "" 409)"", "" ""]
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#7,TU1 create a new bucket via vcloud token with valid name (all lowercase alphabets),create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.%s.%s"" % (string.ascii_lowercase, timestamp(format=""%Y%m%d%H%M%S%f"")[:-5]), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#8,TU1 create a new bucket via vcloud token with valid name (all digitals),create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.%s.%s"" % (string.digits, timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#9,TU1 create a new bucket via vcloud token with valid name (only digitals),create_bucket,P0,"{""bucket_name"":""1011%s"" % int(datetime.datetime.now().timestamp()), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#10,TU1 create a new bucket via vcloud token with valid name (digitals with period XX.XX.XX.XX.XX...),create_bucket,P0,"{""timestamp"": str(int(datetime.datetime.now().timestamp())), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"": ""10.11.%s"" % '.'.join(a+b for a,b in zip(self.variables[""timestamp""][::2], self.variables[""timestamp""][1::2]))}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":""10.11.%s"" % '.'.join(a+b for a,b in zip(self.variables[""timestamp""][::2], self.variables[""timestamp""][1::2]))}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":""10.11.%s"" % '.'.join(a+b for a,b in zip(self.variables[""timestamp""][::2], self.variables[""timestamp""][1::2]))})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket: 10.11.%s % '.'.join(a+b for a"", ""b in zip(self.variablestimestamp::2"", "" self.variablestimestamp1::2))}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":""10.11.%s"" % '.'.join(a+b for a,b in zip(self.variables[""timestamp""][::2], self.variables[""timestamp""][1::2]))}",
TestBucket#test01_test_bucket_crud#11,TU1 create a new bucket via vcloud token with valid name (length=63),create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.create-bucket.%s.%s"" % (random_string(63-18-len(""vcd0.org1.tu1.s3.ext.create-bucket.""), string.ascii_lowercase+string.digits), timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]), ""creation_date_range"":datetimerange.DateTimeRange(datetime.datetime.now(tz=datetime.timezone.utc) - datetime.timedelta(seconds=300),datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(seconds=300))}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#12,TU1 delete bucket via vcloud token(empty),delete_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.delete-bucket.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3], ""object_name"":""vcd0.org1.tu1.s3.ext.default.txt""}","[(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user1"", ""S3CompatibleAPI"", ""empty_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 404])]",group1:user1,S3CompatibleAPI,,delete_bucket,"{""Bucket"":self.variables['bucket_name']}",204,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]})]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  delete_bucket  |  {""Bucket"":self.variables['bucket_name']}",
TestBucket#test01_test_bucket_crud#13,TU1 delete own bucket (empty),delete_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.cmp.delete-bucket.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user1"", ""S3CompatibleAPI"", ""put_object"", {""Bucket"":self.variables[""bucket_name""], ""Key"":""test"",""Body"":""test""}, [200]),
(""group1:user1"", ""S3CompatibleAPI"", ""delete_object"", {""Bucket"":self.variables[""bucket_name""], ""Key"":""test""}, [204])]",group1:user1,S3CompatibleAPI,,delete_bucket,"{""Bucket"":self.variables[""bucket_name""]}",204,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]
group1:user1  |   S3CompatibleAPI  |   put_object  |  ["" {Bucket:self.variablesbucket_name"", "" Key:test"", ""Body:test}"", "" 200)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  delete_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#14,TU1 delete own bucket (empty),delete_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.cmp.delete-bucket.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""group1:user1"", ""S3CompatibleAPI"", ""put_object"", {""Bucket"":self.variables[""bucket_name""], ""Key"":""test"",""Body"":""test""}, [200]),
(""group1:user1"", ""S3CompatibleAPI"", ""delete_object"", {""Bucket"":self.variables[""bucket_name""], ""Key"":""test""}, [204])]",group1:user1,S3CompatibleAPI,,delete_bucket,"{""Bucket"":self.variables[""bucket_name""]}",204,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]
group1:user1  |   S3CompatibleAPI  |   create_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 200"", "" 409)"", """"]
group1:user1  |   S3CompatibleAPI  |   put_object  |  ["" {Bucket:self.variablesbucket_name"", "" Key:test"", ""Body:test}"", "" 200)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  delete_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#15,TU1 head own bucket,head_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.head-bucket.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]",group1:user1,S3CompatibleAPI,,head_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  head_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#16,TU1 head own bucket,head_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.cmp.head-bucket.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""group1:user1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]",group1:user1,S3CompatibleAPI,,head_bucket,"{""Bucket"":self.variables[""bucket_name""]}",200,,,,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)"", """"]

Execution:
group1:user1  |  S3CompatibleAPI  |  head_bucket  |  {""Bucket"":self.variables[""bucket_name""]}",
TestBucket#test01_test_bucket_crud#17,TU1 put bucket with acl to set canned acl to private,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.comp.bucket-w-acl.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""], ""ACL"":""private""}",200,,"{'Location': '%sapi/v1/s3/%s'% (self.get_oss_url(), self.variables[""bucket_name""])}",,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""], ""ACL"":""private""}",
TestBucket#test01_test_bucket_crud#18,TU1 put bucket with acl to set canned acl to public-read,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.comp.bucket-w-acl.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""], ""ACL"":""public-read""}",200,,"{'Location': '%sapi/v1/s3/%s'% (self.get_oss_url(), self.variables[""bucket_name""])}",,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""], ""ACL"":""public-read""}",
TestBucket#test01_test_bucket_crud#19,TU1 put bucket with acl to set canned acl to public-read-write,create_bucket,P0,"{""bucket_name"":""vcd0.org1.tu1.s3.comp.bucket-w-acl.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",group1:user1,S3CompatibleAPI,,create_bucket,"{""Bucket"":self.variables[""bucket_name""], ""ACL"":""public-read-write""}",200,,"{'Location': '%sapi/v1/s3/%s'% (self.get_oss_url(), self.variables[""bucket_name""])}",,,"[(""group1:user1"", ""S3CompatibleAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","Preconditions:
group1:user1  |   S3CompatibleAPI  |   force_delete_bucket  |  ["" {Bucket:self.variablesbucket_name}"", "" 204"", "" 404)""]

Execution:
group1:user1  |  S3CompatibleAPI  |  create_bucket  |  {""Bucket"":self.variables[""bucket_name""], ""ACL"":""public-read-write""}",